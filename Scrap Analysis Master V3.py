# -*- coding: utf-8 -*-
"""
Created on Thu Mar 27 09:56:15 2025

@author: kvella
"""



#This is a program to generate monthly report of scrap generated by the Hutchinson Aerospace and Industry plant in Hopkinton, MA.
#Each month, data can be pulled from our ERP system, loaded into this program and the report will output overall plant data 
#as well as a breakdown by department. The breakdown goes into the reasons why parts or material was scrapped.
#This information can then be used by department managers and Manufacturing Engineers to identify areas for improvement 
# so that we can minimize scrap.


#Loading and Cleaning Data

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#set up month and scrap file for the month
#change for new month
month = 'February'
month_num = 2

#load data
scrap_ytd = pd.read_csv(month+" Scrap YTD.csv")

#cleaning data
#renaming columns to shorter titles
scrap_ytd.columns = ["Whs", "Item", "Description", "Date", "Txn", "Reason", "Order", "UM", "Qty", "Location", 
                     "Batch", "Unit Cost", "Amount Calc", "Amount", "Exp Date", "Vendor Lot", "Prev Qty", "New Qty", 
                     "Employee", "Station", "Dept", "Market", "Reference"]
scrap_ytd = scrap_ytd.replace(" ", "", regex = True)        #remove any spaces
scrap_ytd.dropna(subset = ["Whs"], inplace=True)            #remove unneeded column

#removing commas from numerical strings, changing numerical strings to numbers
#update dept numbers to dept names for legibility
scrap_ytd[["Qty", "Unit Cost", "Amount Calc", "Amount", "Prev Qty", "New Qty"]] = scrap_ytd[["Qty", "Unit Cost", "Amount Calc", "Amount", "Prev Qty", "New Qty"]].replace(",", "", regex = True)
scrap_ytd[["Qty", "Unit Cost", "Amount Calc", "Amount", "Prev Qty", "New Qty"]] = scrap_ytd[["Qty", "Unit Cost", "Amount Calc", "Amount", "Prev Qty", "New Qty"]].apply(pd.to_numeric)
scrap_ytd =scrap_ytd.replace({'Dept': {106:'HSA', 108:'EMA', 113:'I/C', 114:'M&P', 116: 'Savi', 118:'RR', 121:'Assembly', 124:'CB' }})


#add column for month from date posted
scrap_ytd["Month Num"] = scrap_ytd.apply(lambda row: row["Date"].split("/")[0], axis = 1)
scrap_ytd["Month Num"] = scrap_ytd["Month Num"].apply(pd.to_numeric)
scrap_ytd["Month String"] = scrap_ytd["Month Num"]
months_dict = { 1: "Jan.", 2: "Feb.", 3: "Mar.", 4: "Apr.", 5: "May", 6: "Jun.", 7: "Jul.", 8: "Aug.", 9: "Sept.", 
               10: "Oct.", 11: "Nov.", 12: "Dec."}
scrap_ytd["Month String"]=scrap_ytd["Month String"].map(months_dict)
#scrap_ytd = scrap_ytd[scrap_ytd["Txn" != "SS=ScrapItem"]]


scrap_data = scrap_ytd[scrap_ytd["Month Num"] == month_num]


#Sometimes the reason code for scrapping parts is Blank or Scrap, which is not very useful for us when we are trying to find the root cause. 
#The code below creates a new file that lists the employee that scrapped material for one of those reasons. 
#This has helped us identify that in some instances, the Order Trakcing system does not allow employees to select a scrap reason. 
#Otherwise, it can help us identify employees who may need additional training on scrap transactions. 

def export_blanks(df):
    #helper function to export file of employees with blanks or scrap reason codes
    blanks_scrap_data = df[df["Reason"] == "(blank)"]
    blanks_scrap_data = blanks_scrap_data.groupby("Employee")["Reason"].count().reset_index()
    blanks_scrap_data.columns = ["Employee", "Count of Blank Scrap Reason"]
    scrap_scrap_data = df[df["Reason"] == "032=SCRAP"]
    scrap_scrap_data = scrap_scrap_data.groupby("Employee")["Reason"].count().reset_index()
    scrap_scrap_data.columns = ["Employee", "Count of Scrap Scrap Reason"]
    missing_scrap_data = blanks_scrap_data.merge(scrap_scrap_data, how = "outer", on = "Employee")
    missing_scrap_data=missing_scrap_data.fillna(0)
    missing_scrap_data.to_csv(month+" Employees with Blank or Scrap Scrap Reasons.csv", index = False, header = True)

export_blanks(scrap_data)



#Looking at Overall Scrap Data

#This next section looks at overall data for the plant. Below there is the total scrap value, how it is split between compound and parts. 
#In the graphs, we can see the scrap by month, by department, by reason, and by part number. 
#With this information we can identify at a high level the biggest problems for the plant.
#The Overall Data is intended to give upper management a summary of what is happening on the floor.


print("Total scrap year to date: " , scrap_ytd["Amount Calc"].sum().round(2))
print("Total CP scrap year to date: ", scrap_ytd[scrap_ytd["Dept"] == "M&P"]["Amount Calc"].sum().round(2))
print("Total part scrap year to date: ", scrap_ytd[scrap_ytd["Dept"] != "M&P"]["Amount Calc"].sum().round(2))

# Year-to-Date Scrap

#The next few graphs summarize data from the year so far. With this scrap by month histogram, we can see our scrap values this month 
#in the context of previous months. Over time, we can see how our combined manufacturing improvement efforts impact the overall scrap
# amount in dollars. 

#With the second graph split into part scrap and compound scrap, we can better identify trends or problems in the materials department. 
#In the 3rd graph, we can see which individual parts contributed the most to scrap this year. This information can help management set priorities
# for the plant.


#specify graphing colors for later use
plt.rcParams.update({'font.size': 15})
bgcolor = "lightgrey"
c1 = "royalblue"
c2 = "green"
gcolor = "white"


def plot_monthly_scrap(df): 
    scrap_by_month=df.groupby(["Month String", "Month Num"])["Amount Calc"].sum()
    scrap_by_month = scrap_by_month.reset_index()
    scrap_by_month.columns = ["Month Name", "Month Num", "Scrap"]
    scrap_by_month = scrap_by_month.sort_values(["Month Num"], ascending = True)
    fig, ax = plt.subplots(figsize = (10, 5))
    ax.set_facecolor(bgcolor)
    ax.bar(scrap_by_month["Month Name"], scrap_by_month["Scrap"], color = c1)
    ax.set_ylabel("Scrap in Dollars")
    ax.set_title("Scrap by Month YTD", fontweight = "bold")
    ax.grid(axis = "y", color = gcolor)
    fig.savefig(month+" YTD Scrap by Month", bbox_inches = "tight")
    
    
#organizing scrap into months, ordering and plotting 
scrap_ytd["Month Num"] = scrap_ytd["Month Num"].apply(pd.to_numeric)
plot_monthly_scrap(scrap_ytd)

#helper functions
def add_missing_months(df):
    #function to add missing months to a scrap by month dataframe
    #input is a scrap by month dataframe
    #output is same dataframe with 0 values for missing months
    for i in range(1, month_num+1): 
        if (i not in df["Month Num"].values):
            #print(dict[i])
            df.loc[len(df)] = { "Month Name" : months_dict[i], "Month Num": i, "Scrap": 0}
    df = df.sort_values(["Month Num"], ascending = True)
    return df

def generate_monthly(df_ytd, variable):
    #function to generate montly breakdowns from ytd dataframe
    #inputs are ytd dataframe and variable to group by (Qty or Amount Calc)
    #returns new datframe of montly breakdown
    df_new = df_ytd.groupby(["Month String", "Month Num"])[variable].sum()
    df_new = df_new.reset_index()
    df_new.columns = ["Month Name", "Month Num", "Scrap"]
    df_new = add_missing_months(df_new)
    return df_new    

def split_cp_parts(df): 
    #isolating cp scrap and creating a new dataframe with scrap info by month
    cp_scrap_by_month = generate_monthly(df, "Amount Calc")
    cp_scrap_ytd = df[df["Dept"] == "M&P"]
    cp_scrap_by_month=cp_scrap_ytd.groupby(["Month String", "Month Num"])["Amount Calc"].sum()
    cp_scrap_by_month = cp_scrap_by_month.reset_index()
    cp_scrap_by_month.columns = ["Month Name", "Month Num", "CP Scrap"]
    cp_scrap_by_month = cp_scrap_by_month.sort_values(["Month Num"], ascending = True)
    #isolating parts scrap and creating a new dataframe with scrap info by month
    parts_scrap_ytd = df[df["Dept"] != "M&P"]
    parts_scrap_by_month = parts_scrap_ytd.groupby(["Month String", "Month Num"])["Amount Calc"].sum()
    parts_scrap_by_month = parts_scrap_by_month.reset_index()
    parts_scrap_by_month.columns = ["Month Name", "Month Num", "Parts Scrap"]
    parts_scrap_by_month = parts_scrap_by_month.sort_values(["Month Num"], ascending = True)
    #combining the dataframe with separate columns 
    cp_scrap_by_month["Parts Scrap"] = parts_scrap_by_month["Parts Scrap"]
    max_month = max(cp_scrap_by_month["Month Num"])
    cp_scrap_by_month = cp_scrap_by_month.drop(columns = ["Month Num"])
    cp_scrap_by_month = cp_scrap_by_month.reset_index(drop = True)
    return cp_scrap_by_month, cp_scrap_ytd

def Plot_CP_Parts_Scrap(df): 
    fig, ax = plt.subplots(figsize = (10, 5))
    N = 2
    cp_bar = df["CP Scrap"]
    p_bar = df["Parts Scrap"]
    ind = np.arange(N)
    ax.set_facecolor(bgcolor)
    width = .3
    ax.bar(ind, cp_bar, width, label = "CP Scrap", color = c1)
    ax.bar(ind+width, p_bar, width, label = "Parts Scrap", color = c2)
    ax.legend()
    ax.set_xticks(ind+width/2)
    ax.set_xticklabels(cp_scrap_by_month["Month Name"])
    ax.set_ylabel("Scrap in Dollars")
    ax.set_title("Part and Compound Scrap by Month YTD", fontweight = "bold")
    ax.grid(axis = "y", color = "silver")
    fig.savefig(month+" YTD Part and Compound Scrap by Month", bbox_inches = "tight")

cp_scrap_by_month, cp_scrap_ytd = split_cp_parts(scrap_ytd)
Plot_CP_Parts_Scrap(cp_scrap_by_month)

def plot_cp_scrap_info(df): 
    #function to scrap compound scrap in dollars and lbs
    cp_scrap_info = df.groupby("Month Num").agg({"Qty": 'sum', "Amount Calc": 'sum'}).reset_index()
    cp_scrap_info[["Qty", "Amount Calc"]] = round(cp_scrap_info [["Qty", "Amount Calc"]], 2)
    cp_scrap_info.columns = ["Month", "Qty Scrap in Lbs", "Qty Scrap in Dollars"]
    cp_scrap_info.to_csv("2024 Compound Scrap Data.csv", index = False, header = True)

    fig, ax = plt.subplots()
    ax.set_facecolor(bgcolor)
    ax.bar(cp_scrap_info["Month"], cp_scrap_info["Qty Scrap in Lbs"], color = c1)
    ax.set_xticks(range(1, month_num+1), cp_scrap_by_month["Month Name"])
    ax.set_ylabel("Scrap in Lbs")
    ax.grid(axis = "y", color = gcolor)
    props = dict(boxstyle='round', facecolor='grey', alpha=0.15)
    mytext = "Total CP scrap in lbs: " + str(round(sum(cp_scrap_info["Qty Scrap in Lbs"])))
    ax.text(1.05, 1, mytext, transform = ax.transAxes, fontsize = 12, verticalalignment = 'top', bbox = props)
    ax.set_title("2024 Compound Scrap in Lbs" , fontweight = "bold")
    fig.savefig("2024 Compound Scrap Lbs", bbox_inches = "tight")

    fig, ax = plt.subplots()
    ax.set_facecolor(bgcolor)
    ax.bar(cp_scrap_info["Month"], cp_scrap_info["Qty Scrap in Dollars"], color = c1)
    ax.set_xticks(range(1, month_num+1), cp_scrap_by_month["Month Name"])
    ax.set_ylabel("Scrap in $")
    ax.grid(axis = "y", color = gcolor)
    props = dict(boxstyle='round', facecolor='grey', alpha=0.15)
    mytext = "Total CP scrap in Dollars: $" + str(round(sum(cp_scrap_info["Qty Scrap in Dollars"])))
    ax.text(1.05, 1, mytext, transform = ax.transAxes, fontsize = 12, verticalalignment = 'top', bbox = props)
    ax.set_title("2024 Compound Scrap in Dollars" , fontweight = "bold")
    fig.savefig("2024 Compound Scrap Dollars", bbox_inches = "tight")

plot_cp_scrap_info(cp_scrap_ytd)


#plotting this month's top 5 parts scrap

fig, ax = plt.subplots(figsize  = (10, 5))
ax.set_facecolor(bgcolor)
scrap_ytd.groupby("Item")["Amount Calc"].sum().sort_values(ascending = False).head().plot(kind="barh", color = c1)
ax.set_facecolor(bgcolor)
ax.set_xlabel("Scrap in Dollars")
ax.set_title(month + " YTD Top 5 Parts Scrap", fontweight = "bold")
ax.grid(axis = "x", color = gcolor)
fig.savefig(month+ " YTD Top 5 Parts Scrap", bbox_inches = 'tight')



#Current Month Breakdown

#The next few graphs focus on the current month. The data is split by department, by reason, and by part. 
#The department data can show us which area requires most support at the moment. The reason codes and part numbers give us 
#more information for how to direct our efforts. 

print("Total scrap for", month, ': ',  scrap_data["Amount Calc"].sum().round(2))
fig, ax = plt.subplots(figsize  = (10, 5))
ax.set_facecolor(bgcolor)
scrap_data.groupby("Dept")["Amount Calc"].sum().sort_values().plot(kind="barh", color = c1)
ax.set_xlabel("Scrap in Dollars")
ax.set_title(month + " Scrap by Department", fontweight = "bold")
ax.grid(axis = 'x', color = gcolor)
plt.xticks(rotation = 30 )
fig.savefig(month+' Scrap by Dept', bbox_inches = 'tight')

#plot scrap by reason
fig, ax = plt.subplots(figsize = (10, 5))
ax.set_facecolor(bgcolor)
scrap_data.groupby("Reason")["Amount Calc"].sum().sort_values(ascending = False).head(10).plot(kind="barh", color = c1)
ax.set_xlabel("Scrap in Dollars")
ax.set_title(month + " Scrap by Reason", fontweight = "bold")
ax.grid(axis = 'x', color = gcolor)
plt.savefig(month+" Scrap by Reason", bbox_inches='tight')

fig, ax = plt.subplots(figsize = (10, 5))
ax.set_facecolor(bgcolor)
scrap_data.groupby("Item")["Amount Calc"].sum().sort_values(ascending = False).head().plot(kind="barh", color = c1)
ax.set_xlabel("Scrap in Dollars")
ax.set_title(month + " Top 5 Parts Scrap", fontweight = "bold")
ax.grid(axis = 'x', color = gcolor)
fig.savefig(month+" Top 5 Parts Scrap", bbox_inches='tight')

#Looking at Scrap by Department

#This next section gets into more detail by department. This information is intended to be used by the manufacturing engineers 
#and managers for each department. This portion is the most useful information for the Manufacturing Engineers, as it tells us 
#exactly what is going wrong in our area. If money is needed to purchase equiment or material, these numbers can help 
#Manufacturing Engineers justify the cost. 

depts = ["HSA", "EMA", "I/C", "RR", "M&P", "Savi", "Assembly", "CB"]

def find_dept(df, dept):
    #function to split data into separate dataframes for each dept
    if dept == "RR": 
        new_df = df[df["Market"] ==14]
    elif dept == "I/C": 
        new_df = df[df["Dept"] == dept]
        new_df = new_df[new_df["Market"] !=14]
    else: 
        new_df = df[df["Dept"] == dept]
    return new_df

def get_top_three(df):
    #function to get the top 3 parts by scrap dollars in a df
    #input is scrap data df
    #reutrns top 3 (or fewer if applicable) parts by scrap dollars
    top_3 = df.groupby("Item")["Amount Calc"].sum().sort_values(ascending = False).head(3)
    top_3=top_3.reset_index()
    top_3.columns = ['Item', 'Scrap']
    length_top_3 = len(top_3)
    #depts will not always have 3 parts, customize to allow for 1, 2, or 3 parts
    parts=[]
    for i in range(len(top_3)): 
        parts.append(top_3["Item"][i])
    return parts


def plot_scrap_reasons(df, dept, top_3, num, cp = None): 
    #function to plot the scrap reasons for a specific part
    #inputs: scrap dataframe, department string, list of top 3 parts, number of part
    #optional input for if part is compound, to adjust x axis label
    temp_df = df[df["Item"] == top_3[num-1]]
    fig, ax = plt.subplots(figsize = (10, 3))
    ax.set_facecolor(bgcolor)
    temp_df.groupby('Reason')["Qty"].sum().sort_values(ascending = False).plot(kind="barh", color = c1)
    ax.grid(axis = 'x', color = gcolor)
    if cp == None: 
        ax.set_xlabel("Quantity of parts")
    else: 
        ax.set_xlabel("Lbs of CP")
    ax.set_title(month+" " + top_3[num-1] + " Scrap by Reason", fontweight = "bold") 
    plt.xticks(rotation = 0 )
    fig.savefig(month+ " " + dept + " Top Part "+ str(num) + " Scrap by Reason", bbox_inches ='tight' )
    #plt.close()

def plot_dept_scrap(df, dept):
    #plot scrap for a specified department
    #input is department dataframe, department string
    fig, ax = plt.subplots(figsize = (10, 5))
    ax.set_facecolor(bgcolor)
    df.groupby("Item")["Amount Calc"].sum().sort_values(ascending = False).head().plot(kind="barh", color = c1)
    ax.set_xlabel("Scrap in Dollars")
    ax.grid(axis = 'x', color = gcolor)
    ax.set_title(month+ " " + dept +" Top 5 Parts Scrap", fontweight = "bold")
    fig.savefig(month+ " " + dept +" Top 5 Parts Scrap", bbox_inches='tight')
    #plt.close()

def plot_scrap_reference(df, dept, top_3, num, cp = None): 
    #function to plot the scrap reference for a specific part
    #inputs: scrap dataframe, department string, list of top 3 parts, number of part
    #optional input for if part is compound, to adjust x axis label
    temp_df = df[df["Item"] == top_3[num-1]]
    temp_df.groupby('Reference')["Qty"].sum().plot(kind="barh")
    plt.grid(axis = 'x')
    if cp == None: 
        plt.xlabel("Quantity of parts")
    else: 
        plt.xlabel("Lbs of CP")
    plt.title(month+" " + top_3[num-1] + " Scrap by Reason") 
    plt.xticks(rotation = 0 )
    plt.savefig(month+ " " + dept + " Top Part "+ str(num) + " Scrap by Reference", bbox_inches ='tight' )
    #plt.close()

def plot_dept_tops(depts): 
    for dept in depts: 
        if dept == "I/C": 
            string = "Inj&Comp"
        else: 
            string = dept
        dept_df = find_dept(scrap_data, dept)
        if len(dept_df) >0: 
            plot_dept_scrap(dept_df, string)
        parts = get_top_three(dept_df)
        if len(parts) >=1: 
            plot_scrap_reasons(dept_df, string, parts, 1)
        if len(parts) >=2: 
            plot_scrap_reasons(dept_df, string, parts, 2)
        if len(parts) >=3: 
            plot_scrap_reasons(dept_df, string, parts, 3)
            
            
plot_dept_tops(depts)